/// <reference types="node" />
import { Closeable, Deferred, Demultiplexer, Deserializer, DuplexConnection, Frame, FrameHandler, Multiplexer, Outbound } from "rsocket-core";
import net from "net";
export declare class TcpDuplexConnection extends Deferred implements DuplexConnection, Outbound {
    private socket;
    private readonly deserializer;
    private error;
    private remainingBuffer;
    readonly multiplexerDemultiplexer: Multiplexer & Demultiplexer & FrameHandler;
    constructor(socket: net.Socket, deserializer: Deserializer, multiplexerDemultiplexerFactory: (outbound: Outbound & Closeable) => Multiplexer & Demultiplexer & FrameHandler);
    get availability(): number;
    close(error?: Error): void;
    send(frame: Frame): void;
    /**
     * Handles close event from the underlying socket.
     * @param hadError
     * @private
     */
    private handleClosed;
    /**
     * Handles error events from the underlying socket. `handleClosed` is expected to be called
     * immediately following `handleError`.
     * @param error
     * @private
     */
    private handleError;
    private handleData;
}
