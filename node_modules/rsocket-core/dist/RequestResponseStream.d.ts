/// <reference types="node" />
import { CancelFrame, ErrorFrame, ExtFrame, FrameTypes, PayloadFrame, RequestNFrame, RequestResponseFrame } from "./Frames";
import { LeaseManager } from "./Lease";
import * as Reassembler from "./Reassembler";
import { Cancellable, OnExtensionSubscriber, OnNextSubscriber, OnTerminalSubscriber, Payload } from "./RSocket";
import { Stream, StreamFrameHandler, StreamLifecycleHandler } from "./Transport";
export declare class RequestResponseRequesterStream implements Cancellable, OnExtensionSubscriber, StreamFrameHandler, StreamLifecycleHandler, Reassembler.FragmentsHolder {
    private readonly payload;
    private readonly receiver;
    private readonly fragmentSize;
    private readonly leaseManager?;
    readonly streamType = FrameTypes.REQUEST_RESPONSE;
    private stream;
    private done;
    private hasExtension;
    private extendedType;
    private extendedContent;
    private flags;
    hasFragments: boolean;
    data: Buffer;
    metadata: Buffer;
    streamId: number;
    constructor(payload: Payload, receiver: OnTerminalSubscriber & OnNextSubscriber & OnExtensionSubscriber, fragmentSize: number, leaseManager?: LeaseManager);
    handleReady(streamId: number, stream: Stream): boolean;
    handleReject(error: Error): void;
    handle(frame: PayloadFrame | ErrorFrame | ExtFrame): void;
    cancel(): void;
    onExtension(extendedType: number, content: Buffer | null | undefined, canBeIgnored: boolean): void;
    close(error?: Error): void;
}
export declare class RequestResponseResponderStream implements OnTerminalSubscriber, OnNextSubscriber, OnExtensionSubscriber, StreamFrameHandler, Reassembler.FragmentsHolder {
    readonly streamId: number;
    private readonly stream;
    private readonly fragmentSize;
    private readonly handler;
    readonly streamType = FrameTypes.REQUEST_RESPONSE;
    private receiver?;
    private done;
    hasFragments: boolean;
    data: Buffer;
    metadata: Buffer;
    constructor(streamId: number, stream: Stream, fragmentSize: number, handler: (payload: Payload, senderStream: OnNextSubscriber & OnTerminalSubscriber & OnExtensionSubscriber) => Cancellable & OnExtensionSubscriber, frame: RequestResponseFrame);
    handle(frame: CancelFrame | ErrorFrame | PayloadFrame | RequestNFrame | ExtFrame): void;
    onError(error: Error): void;
    onNext(payload: Payload, isCompletion: boolean): void;
    onComplete(): void;
    onExtension(extendedType: number, content: Buffer, canBeIgnored: boolean): void;
    close(error?: Error): void;
}
