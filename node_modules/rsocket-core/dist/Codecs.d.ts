/// <reference types="node" />
import { Frame } from "./Frames";
export declare const FLAGS_MASK = 1023;
export declare const FRAME_TYPE_OFFFSET = 10;
export declare const MAX_CODE = 2147483647;
export declare const MAX_KEEPALIVE = 2147483647;
export declare const MAX_LIFETIME = 2147483647;
export declare const MAX_METADATA_LENGTH = 16777215;
export declare const MAX_MIME_LENGTH = 255;
export declare const MAX_REQUEST_COUNT = 2147483647;
export declare const MAX_REQUEST_N = 2147483647;
export declare const MAX_RESUME_LENGTH = 65535;
export declare const MAX_STREAM_ID = 2147483647;
export declare const MAX_TTL = 2147483647;
export declare const MAX_VERSION = 65535;
export declare type Encoding = "ascii" | "base64" | "hex" | "utf8";
/**
 * Read a uint24 from a buffer starting at the given offset.
 */
export declare function readUInt24BE(buffer: Buffer, offset: number): number;
/**
 * Writes a uint24 to a buffer starting at the given offset, returning the
 * offset of the next byte.
 */
export declare function writeUInt24BE(buffer: Buffer, value: number, offset: number): number;
/**
 * Read a uint64 (technically supports up to 53 bits per JS number
 * representation).
 */
export declare function readUInt64BE(buffer: Buffer, offset: number): number;
/**
 * Write a uint64 (technically supports up to 53 bits per JS number
 * representation).
 */
export declare function writeUInt64BE(buffer: Buffer, value: number, offset: number): number;
/**
 * Reads a frame from a buffer that is prefixed with the frame length.
 */
export declare function deserializeFrameWithLength(buffer: Buffer): Frame;
/**
 * Given a buffer that may contain zero or more length-prefixed frames followed
 * by zero or more bytes of a (partial) subsequent frame, returns an array of
 * the frames and an int representing the buffer offset.
 */
export declare function deserializeFrames(buffer: Buffer): Generator<[Frame, number]>;
/**
 * Writes a frame to a buffer with a length prefix.
 */
export declare function serializeFrameWithLength(frame: Frame): Buffer;
/**
 * Read a frame from the buffer.
 */
export declare function deserializeFrame(buffer: Buffer): Frame;
/**
 * Convert the frame to a (binary) buffer.
 */
export declare function serializeFrame(frame: Frame): Buffer;
/**
 * Byte size of frame without size prefix
 */
export declare function sizeOfFrame(frame: Frame): number;
export declare class Deserializer {
    /**
     * Read a frame from the buffer.
     */
    deserializeFrame(buffer: Buffer): Frame;
    /**
     * Reads a frame from a buffer that is prefixed with the frame length.
     */
    deserializeFrameWithLength(buffer: Buffer): Frame;
    /**
     * Given a buffer that may contain zero or more length-prefixed frames followed
     * by zero or more bytes of a (partial) subsequent frame, returns an array of
     * the frames and a int representing the buffer offset.
     */
    deserializeFrames(buffer: Buffer): Generator<[Frame, number]>;
}
