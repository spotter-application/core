/// <reference types="node" />
import { CancelFrame, ErrorFrame, FrameTypes, PayloadFrame, RequestFnfFrame } from "./Frames";
import { LeaseManager } from "./Lease";
import * as Reassembler from "./Reassembler";
import { Cancellable, OnTerminalSubscriber, Payload } from "./RSocket";
import { Stream, StreamFrameHandler, StreamLifecycleHandler } from "./Transport";
export declare class RequestFnFRequesterStream implements Cancellable, StreamLifecycleHandler, StreamFrameHandler {
    private readonly payload;
    private readonly receiver;
    private readonly fragmentSize;
    private readonly leaseManager?;
    readonly streamType = FrameTypes.REQUEST_FNF;
    private done;
    streamId: number;
    constructor(payload: Payload, receiver: OnTerminalSubscriber, fragmentSize: number, leaseManager?: LeaseManager);
    handleReady(streamId: number, stream: Stream): boolean;
    handleReject(error: Error): void;
    cancel(): void;
    handle(frame: ErrorFrame): void;
    close(error?: Error): void;
}
export declare class RequestFnfResponderStream implements OnTerminalSubscriber, StreamFrameHandler, Reassembler.FragmentsHolder {
    readonly streamId: number;
    private stream;
    private handler;
    readonly streamType = FrameTypes.REQUEST_FNF;
    private cancellable?;
    private done;
    hasFragments: boolean;
    data: Buffer;
    metadata: Buffer;
    constructor(streamId: number, stream: Stream, handler: (payload: Payload, senderStream: OnTerminalSubscriber) => Cancellable, frame: RequestFnfFrame);
    handle(frame: CancelFrame | ErrorFrame | PayloadFrame): void;
    close(error?: Error): void;
    onError(error: Error): void;
    onComplete(): void;
}
