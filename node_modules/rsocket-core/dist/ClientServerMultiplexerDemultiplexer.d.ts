import { ResumeFrame, ResumeOkFrame } from ".";
import { Closeable } from "./Common";
import { Deferred } from "./Deferred";
import { Frame } from "./Frames";
import { FrameStore } from "./Resume";
import { ConnectionFrameHandler, Demultiplexer, FrameHandler, Multiplexer, Outbound, Stream, StreamFrameHandler, StreamLifecycleHandler, StreamRequestHandler } from "./Transport";
export interface StreamIdGenerator {
    next(handler: (nextId: number) => boolean, streams: Array<number>): void;
}
export declare namespace StreamIdGenerator {
    function create(seedId: number): StreamIdGenerator;
}
export declare class ClientServerInputMultiplexerDemultiplexer extends Deferred implements Closeable, Multiplexer, Demultiplexer, Stream, FrameHandler {
    private readonly streamIdSupplier;
    protected outbound: Outbound;
    private readonly closeable;
    private readonly registry;
    protected connectionFramesHandler: ConnectionFrameHandler;
    private requestFramesHandler;
    constructor(streamIdSupplier: StreamIdGenerator, outbound: Outbound, closeable: Closeable);
    handle(frame: Frame): void;
    connectionInbound(handler: ConnectionFrameHandler): void;
    handleRequestStream(handler: StreamRequestHandler): void;
    send(frame: Frame): void;
    get connectionOutbound(): Outbound;
    createRequestStream(streamHandler: StreamFrameHandler & StreamLifecycleHandler): void;
    connect(handler: StreamFrameHandler): void;
    disconnect(stream: StreamFrameHandler): void;
    close(error?: Error): void;
}
export declare class ResumableClientServerInputMultiplexerDemultiplexer extends ClientServerInputMultiplexerDemultiplexer {
    private readonly frameStore;
    private readonly token;
    private readonly sessionTimeout?;
    private readonly sessionStore?;
    private readonly reconnector?;
    private timeoutId?;
    constructor(streamIdSupplier: StreamIdGenerator, outbound: Outbound, closeable: Closeable, frameStore: FrameStore, token: string, sessionStoreOrReconnector: {
        [sessionId: string]: ResumableClientServerInputMultiplexerDemultiplexer;
    } | ((self: ResumableClientServerInputMultiplexerDemultiplexer, frameStore: FrameStore) => Promise<void>), sessionTimeout?: number);
    send(frame: Frame): void;
    handle(frame: Frame): void;
    resume(frame: ResumeFrame | ResumeOkFrame, outbound: Outbound, closeable: Closeable): void;
    private handleConnectionClose;
}
export declare class ResumeOkAwaitingResumableClientServerInputMultiplexerDemultiplexer implements Closeable, Multiplexer, Demultiplexer, FrameHandler {
    private readonly outbound;
    private readonly closeable;
    private readonly delegate;
    private resumed;
    constructor(outbound: Outbound, closeable: Closeable, delegate: ResumableClientServerInputMultiplexerDemultiplexer);
    close(): void;
    onClose(callback: (error?: Error) => void): void;
    get connectionOutbound(): Outbound;
    createRequestStream(streamHandler: StreamFrameHandler & StreamLifecycleHandler): void;
    connectionInbound(handler: ConnectionFrameHandler): void;
    handleRequestStream(handler: StreamRequestHandler): void;
    handle(frame: Frame): void;
}
