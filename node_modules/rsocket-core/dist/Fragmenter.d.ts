import { FrameTypes, PayloadFrame, RequestChannelFrame, RequestFnfFrame, RequestResponseFrame, RequestStreamFrame } from "./Frames";
import { Payload } from "./RSocket";
export declare function isFragmentable(payload: Payload, fragmentSize: number, frameType: FrameTypes.PAYLOAD | FrameTypes.REQUEST_FNF | FrameTypes.REQUEST_RESPONSE | FrameTypes.REQUEST_STREAM | FrameTypes.REQUEST_CHANNEL): boolean;
export declare function fragment(streamId: number, payload: Payload, fragmentSize: number, frameType: FrameTypes.PAYLOAD | FrameTypes.REQUEST_FNF | FrameTypes.REQUEST_RESPONSE, isComplete?: boolean): Generator<PayloadFrame | RequestFnfFrame | RequestResponseFrame>;
export declare function fragmentWithRequestN(streamId: number, payload: Payload, fragmentSize: number, frameType: FrameTypes.REQUEST_STREAM | FrameTypes.REQUEST_CHANNEL, requestN: number, isComplete?: boolean): Generator<PayloadFrame | RequestStreamFrame | RequestChannelFrame>;
